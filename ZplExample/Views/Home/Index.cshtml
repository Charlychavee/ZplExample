@{

    Layout = null;
}
<html>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<head>
    <script type="text/javascript" src="/assets/js/BrowserPrint-3.0.216.min.js"></script>
    <script type="text/javascript">

		var SITE_URL = '@string.Format("{0}://{1}{2}", Request.Url.Scheme, Request.Url.Authority, Url.Content("~")).TrimEnd('/')';
		var selected_device;
		var devices = [];

		function setup() {
			//Get the default device from the application as a first step. Discovery takes longer to complete.
			BrowserPrint.getDefaultDevice("printer", function (device) {

				//Add device to list of devices and to html select element
				selected_device = device;
				devices.push(device);
				var html_select = document.getElementById("selected_device");
				var option = document.createElement("option");
				option.text = device.name;
				html_select.add(option);

				//Discover any other devices available to the application
				BrowserPrint.getLocalDevices(function (device_list) {
					for (var i = 0; i < device_list.length; i++) {
						//Add device to list of devices and to html select element
						var device = device_list[i];
						if (!selected_device || device.uid != selected_device.uid) {
							devices.push(device);
							var option = document.createElement("option");
							option.text = device.name;
							option.value = device.uid;
							html_select.add(option);
						}
					}

				}, function () { alert("Error getting local devices") }, "printer");

			}, function (error) {
				alert(error);
			})
		}

		function getConfig() {
			BrowserPrint.getApplicationConfiguration(function (config) {
				alert(JSON.stringify(config))
                console.log(JSON.stringify(config))
			}, function (error) {
				alert(JSON.stringify(new BrowserPrint.ApplicationConfiguration()));
			})
		}

		function writeToSelectedPrinter(dataToWrite) {
            console.log(dataToWrite)
			//selected_device.send(dataToWrite, undefined, errorCallback);
            selected_device.send(dataToWrite, function (success) { console.log("Sent to printer"); console.log(success); }, function (error) { console.error("Error:" + error); });
		}

		function enviarImprimir() {

			let texto = document.getElementById('write_text2').value;
            let textoF = '^XA^FO200,200^A0N36,36^FD' + texto + '^FS^XZ';
			console.log(texto);
            console.log(textoF);
            writeToSelectedPrinter(textoF)

		}

		var readCallback = function (readData) {
			if (readData === undefined || readData === null || readData === "") {
				alert("No Response from Device");
			}
			else {
				alert(readData);
			}

		}

		var errorCallback = function (errorMessage) {
			alert("Error: " + errorMessage);
		}

		function readFromSelectedPrinter() {

			selected_device.read(readCallback, errorCallback);

		}

		function getDeviceCallback(deviceList) {
            console.log(deviceList)
			alert("Devices: \n" + JSON.stringify(deviceList, null, 4))
		}

		function onDeviceSelected(selected) {
			for (var i = 0; i < devices.length; ++i) {
				if (selected.value == devices[i].uid) {
					selected_device = devices[i];
					return;
				}
			}
		}

		function PinrtEtqueta() {
			let body = "";
            body += '^XA' +
                '^FO190,60^BQN,2,4^FDQA,Felix was here no sabe que está haciendo pero es genial^FS' +
                '^CFA,30' +
                '^FO360,40^A0^FDNombre del producto^FS' +
                '^FO360,100^A0^FDCodigo: 63512765367225937^FS' +
                '^FO360,160^A0^FDTexto adicional que puede ^FS' +
                '^FO360,200^A0^FDser un maximo de tres^FS' +
                '^FO360,240^A0^FDrenglones sin excederse^FS' +
                '^XZ';
            writeToSelectedPrinter(body)
        }
		window.onload = setup;
    </script>
</head>
<body>

    <span style="padding-right:50px; font-size:200%">Zebra Browser Print Test Page</span><br />
    <span style="font-size:75%">This page must be loaded from a web server to function properly.</span><br><br>
    Selected Device: <select id="selected_device" onchange=onDeviceSelected(this);></select> <!--  <input type="button" value="Change" onclick="changeDevice();">--> <br /><br />
    <input type="button" value="Get Application Configuration" onclick="getConfig()"><br /><br />
    <input type="button" value="Send Config Label" onclick="writeToSelectedPrinter('~wc')"><br /><br />
    <input type="button" value="Send ZPL Label" onclick="writeToSelectedPrinter('^XA^FO200,200^A0N36,36^FDTest Label^FS^XZ')"><br /><br />
    <input type="button" value="Get Status" onclick="writeToSelectedPrinter('~hs'); readFromSelectedPrinter()"><br /><br />
    <input type="button" value="Get Local Devices" onclick="BrowserPrint.getLocalDevices(getDeviceCallback, errorCallback);"><br /><br />
    <input type="text" name="write_text2" id="write_text2"><input type="button" value="Write" onclick="enviarImprimir()"><br /><br />
    <input type="button" value="Read" onclick="readFromSelectedPrinter()"><br /><br />
    <input type="button" value="Send QR" onclick="PinrtEtqueta();"><br /><br />
</body>
</html>